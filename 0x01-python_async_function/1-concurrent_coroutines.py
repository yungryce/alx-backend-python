#!/usr/bin/env python3
'''Task 1's module.
'''
import asyncio
from typing import List


wait_random = __import__('0-basic_async_syntax').wait_random


async def wait_n(n: int, max_delay: int) -> List[float]:
    '''Executes wait_random n times.
    '''
    # Use asyncio.gather() to concurrently execute multiple asynchronous tasks.
    # Inside the gather function, map() creates a sequence of asynchronous wait_random() calls.
    # Each wait_random() call is generated by applying the lambda function to each number in the range from 0 to n-1.
    # This lambda function acts as a wrapper around wait_random(max_delay), allowing it to be called multiple times.
    # The result is a list of floating-point numbers representing the sorted wait times.
    wait_times = await asyncio.gather(
        *tuple(map(lambda _: wait_random(max_delay), range(n)))
    )
    return sorted(wait_times)
